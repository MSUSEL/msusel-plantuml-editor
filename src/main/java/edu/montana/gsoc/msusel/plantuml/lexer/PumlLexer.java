/* The following code was generated by JFlex 1.6.1 */

package edu.montana.gsoc.msusel.plantuml.lexer;

import de.sciss.syntaxpane.Token;
import de.sciss.syntaxpane.TokenType;
import de.sciss.syntaxpane.lexers.DefaultJFlexLexer;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/git/msusel/msusel-patterns-experimenter/src/main/resources/edu/montana/gsoc/msusel/patterns/plantuml/PlantUML.flex</tt>
 */
public final class PumlLexer extends DefaultJFlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int INSIDE_COLONS = 2;
    public static final int INSIDE_PARENTHESIS = 4;
    public static final int STEREOTYPE = 6;
    public static final int STRING = 8;
    public static final int CHARLITERAL = 10;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\62\1\7\1\1\22\0\1\3\1\0\1\6" +
                    "\1\52\3\0\1\61\1\57\1\60\1\51\1\52\1\0\1\42\1\50" +
                    "\1\0\12\4\1\46\1\0\1\45\1\0\1\43\1\0\1\10\32\4" +
                    "\1\41\1\5\1\44\1\55\1\4\1\0\1\13\1\25\1\23\1\22" +
                    "\1\20\1\37\1\32\1\36\1\27\1\40\1\33\1\17\1\16\1\21" +
                    "\1\24\1\30\1\4\1\14\1\11\1\12\1\15\1\34\1\31\1\35" +
                    "\1\26\1\4\1\54\1\47\1\53\1\56\6\0\1\62\44\0\1\4" +
                    "\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4" +
                    "\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\201\0\5\4" +
                    "\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3\4" +
                    "\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\10\0\246\4" +
                    "\1\0\46\4\2\0\1\4\7\0\47\4\110\0\33\4\5\0\3\4" +
                    "\55\0\53\4\25\0\12\4\4\0\2\4\1\0\143\4\1\0\1\4" +
                    "\17\0\2\4\7\0\2\4\12\4\3\4\2\0\1\4\20\0\1\4" +
                    "\1\0\36\4\35\0\131\4\13\0\1\4\16\0\12\4\41\4\11\0" +
                    "\2\4\4\0\1\4\5\0\26\4\4\0\1\4\11\0\1\4\3\0" +
                    "\1\4\27\0\31\4\107\0\23\4\121\0\66\4\3\0\1\4\22\0" +
                    "\1\4\7\0\12\4\4\0\12\4\1\0\20\4\4\0\10\4\2\0" +
                    "\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0" +
                    "\1\4\20\0\1\4\15\0\2\4\1\0\3\4\4\0\12\4\2\4" +
                    "\23\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4" +
                    "\1\0\2\4\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\4" +
                    "\2\0\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4" +
                    "\1\0\2\4\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4" +
                    "\4\0\12\4\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4" +
                    "\1\0\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4" +
                    "\4\0\12\4\1\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4" +
                    "\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4" +
                    "\3\0\3\4\3\0\14\4\26\0\1\4\25\0\12\4\25\0\10\4" +
                    "\1\0\3\4\1\0\27\4\1\0\20\4\3\0\1\4\32\0\2\4" +
                    "\6\0\2\4\4\0\12\4\25\0\10\4\1\0\3\4\1\0\27\4" +
                    "\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0\2\4" +
                    "\4\0\12\4\1\0\2\4\22\0\10\4\1\0\3\4\1\0\51\4" +
                    "\2\0\1\4\20\0\1\4\21\0\2\4\4\0\12\4\12\0\6\4" +
                    "\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4" +
                    "\37\0\12\4\21\0\60\4\1\0\2\4\14\0\7\4\11\0\12\4" +
                    "\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4" +
                    "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4" +
                    "\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4" +
                    "\1\0\1\4\11\0\12\4\2\0\4\4\40\0\1\4\37\0\12\4" +
                    "\26\0\10\4\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4" +
                    "\12\4\6\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0" +
                    "\3\4\4\0\15\4\14\0\1\4\1\0\12\4\6\0\46\4\1\0" +
                    "\1\4\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0" +
                    "\7\4\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0" +
                    "\41\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0" +
                    "\17\4\1\0\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0" +
                    "\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\6\0" +
                    "\10\4\7\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4\16\0" +
                    "\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0\1\4\3\0" +
                    "\12\4\46\0\12\4\6\0\130\4\10\0\51\4\1\0\1\4\5\0" +
                    "\106\4\12\0\37\4\47\0\12\4\36\4\2\0\5\4\13\0\54\4" +
                    "\25\0\7\4\10\0\12\4\46\0\27\4\11\0\65\4\53\0\12\4" +
                    "\6\0\12\4\15\0\1\4\135\0\57\4\21\0\7\4\4\0\12\4" +
                    "\51\0\36\4\15\0\2\4\12\4\54\4\32\0\44\4\34\0\12\4" +
                    "\3\0\3\4\12\4\44\4\153\0\4\4\1\0\4\4\3\0\2\4" +
                    "\11\0\300\4\100\0\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4" +
                    "\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4" +
                    "\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4" +
                    "\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4" +
                    "\53\0\1\62\1\62\107\0\1\4\15\0\1\4\20\0\15\4\145\0" +
                    "\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0" +
                    "\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0" +
                    "\4\4\5\0\5\4\4\0\1\4\64\0\2\4\u0a7b\0\57\4\1\0" +
                    "\57\4\1\0\205\4\6\0\4\4\3\0\2\4\14\0\46\4\1\0" +
                    "\1\4\5\0\1\4\2\0\70\4\7\0\1\4\20\0\27\4\11\0" +
                    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0" +
                    "\7\4\1\0\7\4\1\0\7\4\120\0\1\4\u01d5\0\2\4\52\0" +
                    "\5\4\5\0\2\4\4\0\126\4\6\0\3\4\1\0\132\4\1\0" +
                    "\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0" +
                    "\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0" +
                    "\20\4\12\4\2\4\24\0\57\4\20\0\37\4\2\0\106\4\61\0" +
                    "\11\4\2\0\147\4\2\0\4\4\1\0\36\4\2\0\2\4\105\0" +
                    "\13\4\1\0\3\4\1\0\4\4\1\0\27\4\35\0\64\4\16\0" +
                    "\62\4\34\0\12\4\30\0\6\4\3\0\1\4\4\0\12\4\34\4" +
                    "\12\0\27\4\31\0\35\4\7\0\57\4\34\0\1\4\12\4\6\0" +
                    "\5\4\1\0\12\4\12\4\5\4\1\0\51\4\27\0\3\4\1\0" +
                    "\10\4\4\0\12\4\6\0\27\4\3\0\1\4\3\0\62\4\1\0" +
                    "\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0" +
                    "\3\4\2\0\13\4\7\0\3\4\14\0\6\4\2\0\6\4\2\0" +
                    "\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\4\4\4\0" +
                    "\2\4\132\0\43\4\15\0\12\4\6\0\u2ba4\4\14\0\27\4\4\0" +
                    "\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0" +
                    "\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0" +
                    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0" +
                    "\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\4\7\0" +
                    "\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0" +
                    "\6\4\2\0\3\4\43\0\14\4\1\0\32\4\1\0\23\4\1\0" +
                    "\2\4\1\0\17\4\2\0\16\4\42\0\173\4\u0185\0\35\4\3\0" +
                    "\61\4\57\0\40\4\20\0\21\4\1\0\10\4\6\0\46\4\12\0" +
                    "\36\4\2\0\44\4\4\0\10\4\60\0\236\4\2\0\12\4\126\0" +
                    "\50\4\10\0\64\4\234\0\u0137\4\11\0\26\4\12\0\10\4\230\0" +
                    "\6\4\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4\2\0" +
                    "\27\4\12\0\27\4\11\0\37\4\141\0\26\4\12\0\32\4\106\0" +
                    "\70\4\6\0\2\4\100\0\1\4\17\0\4\4\1\0\3\4\1\0" +
                    "\33\4\54\0\35\4\3\0\35\4\43\0\10\4\1\0\34\4\33\0" +
                    "\66\4\12\0\26\4\12\0\23\4\15\0\22\4\156\0\111\4\u03ba\0" +
                    "\65\4\56\0\12\4\23\0\55\4\40\0\31\4\7\0\12\4\11\0" +
                    "\44\4\17\0\12\4\20\0\43\4\3\0\1\4\14\0\60\4\16\0" +
                    "\4\4\13\0\12\4\1\4\45\0\22\4\1\0\31\4\204\0\57\4" +
                    "\21\0\12\4\13\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4" +
                    "\1\0\2\4\1\0\5\4\3\0\1\4\37\0\5\4\u011e\0\60\4" +
                    "\24\0\2\4\1\0\1\4\10\0\12\4\246\0\57\4\121\0\60\4" +
                    "\24\0\1\4\13\0\12\4\46\0\53\4\25\0\12\4\u01d6\0\100\4" +
                    "\12\4\25\0\1\4\u01c0\0\71\4\u0507\0\u0399\4\u0c67\0\u042f\4\u33d1\0" +
                    "\u0239\4\7\0\37\4\1\0\12\4\146\0\36\4\22\0\60\4\20\0" +
                    "\4\4\14\0\12\4\11\0\25\4\5\0\23\4\u0370\0\105\4\13\0" +
                    "\1\4\102\0\15\4\u4060\0\2\4\u0bfe\0\153\4\5\0\15\4\3\0" +
                    "\11\4\7\0\12\4\u1766\0\125\4\1\0\107\4\1\0\2\4\2\0" +
                    "\1\4\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0" +
                    "\7\4\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0" +
                    "\34\4\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0" +
                    "\u0154\4\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0" +
                    "\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0" +
                    "\31\4\1\0\10\4\2\0\62\4\u1000\0\305\4\u053b\0\4\4\1\0" +
                    "\33\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12\4\1\0" +
                    "\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0" +
                    "\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1\4\2\0" +
                    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0" +
                    "\2\4\1\0\1\4\2\0\4\4\1\0\7\4\1\0\4\4\1\0" +
                    "\4\4\1\0\1\4\1\0\12\4\1\0\21\4\5\0\3\4\1\0" +
                    "\5\4\1\0\21\4\u1144\0\ua6d7\4\51\0\u1035\4\13\0\336\4\u3fe2\0" +
                    "\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\1\1\2\1\3\1\4\2\0\1\5\1\1\1\6" +
                    "\1\0\23\1\1\0\1\7\1\0\1\7\2\0\1\7" +
                    "\1\0\1\7\1\0\1\10\1\11\1\2\1\12\1\3" +
                    "\1\4\1\11\1\13\2\14\1\0\1\15\1\13\2\0" +
                    "\6\1\1\7\20\1\2\0\3\1\1\16\3\1\2\0" +
                    "\3\1\11\0\1\7\2\0\1\7\3\0\1\17\2\0" +
                    "\16\1\1\16\15\1\1\0\3\1\1\16\5\1\5\0" +
                    "\3\7\2\0\7\1\1\16\22\1\1\7\5\0\22\1" +
                    "\1\0\14\1\1\16\11\1";

    private static int[] zzUnpackAction() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165" +
                    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd" +
                    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495" +
                    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d" +
                    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u06f9\0\u0198\0\u072c\0\u0198" +
                    "\0\u0198\0\u075f\0\u0198\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e" +
                    "\0\u0198\0\u0891\0\u0198\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990" +
                    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0165\0\u0a8f\0\u0ac2\0\u0af5" +
                    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d" +
                    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25" +
                    "\0\u0e58\0\u0e8b\0\u0165\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a" +
                    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122" +
                    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba" +
                    "\0\u12ed\0\u1320\0\u1353\0\u0198\0\u1386\0\u13b9\0\u13ec\0\u141f" +
                    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7" +
                    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f" +
                    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7" +
                    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f" +
                    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17" +
                    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u10bc\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c" +
                    "\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14" +
                    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac" +
                    "\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244" +
                    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc" +
                    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574" +
                    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c" +
                    "\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4" +
                    "\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u0198\0\u29d6\0\u2a09" +
                    "\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\0\3\7\1\10\1\0\1\11\1\7\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\10\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\10\1\27\1\30\1\31" +
                    "\1\32\2\10\1\33\1\34\1\35\1\10\1\36\1\37" +
                    "\2\0\1\40\1\41\1\0\1\42\1\43\1\44\1\45" +
                    "\1\0\1\45\1\46\1\47\1\0\1\50\1\0\3\51" +
                    "\3\52\1\51\1\52\1\51\30\52\5\51\1\53\17\51" +
                    "\3\54\1\51\1\54\1\51\30\54\17\51\1\53\5\51" +
                    "\2\55\2\51\1\55\1\51\30\55\2\51\1\56\17\51" +
                    "\1\57\1\60\1\61\2\57\1\62\1\63\1\0\53\57" +
                    "\1\0\1\60\1\61\2\64\1\62\1\0\1\64\1\0" +
                    "\30\64\20\0\1\63\2\0\3\7\3\0\1\7\57\0" +
                    "\1\10\4\0\30\10\116\0\1\65\6\0\1\66\46\0" +
                    "\1\10\4\0\1\10\1\67\5\10\1\70\2\10\1\71" +
                    "\7\10\1\72\5\10\26\0\1\10\4\0\16\10\1\73" +
                    "\6\10\1\74\2\10\26\0\1\10\4\0\1\75\3\10" +
                    "\1\76\1\10\1\70\3\10\1\77\15\10\26\0\1\10" +
                    "\4\0\7\10\1\100\20\10\26\0\1\10\4\0\1\101" +
                    "\27\10\26\0\1\10\4\0\13\10\1\102\14\10\26\0" +
                    "\1\10\4\0\6\10\1\103\1\10\1\104\17\10\26\0" +
                    "\1\10\4\0\2\10\1\105\4\10\1\106\3\10\1\107" +
                    "\14\10\26\0\1\10\4\0\2\10\1\110\4\10\1\111" +
                    "\20\10\26\0\1\10\4\0\3\10\1\112\2\10\1\113" +
                    "\4\10\1\114\14\10\26\0\1\10\4\0\14\10\1\115" +
                    "\2\10\1\70\10\10\1\0\1\116\5\0\1\117\16\0" +
                    "\1\10\4\0\3\10\1\120\7\10\1\121\14\10\26\0" +
                    "\1\10\4\0\10\10\1\122\15\10\1\123\1\10\26\0" +
                    "\1\10\4\0\2\10\1\124\25\10\26\0\1\10\4\0" +
                    "\25\10\1\125\2\10\26\0\1\10\4\0\3\10\1\126" +
                    "\24\10\26\0\1\10\4\0\30\10\1\0\1\127\2\0" +
                    "\1\130\21\0\1\10\4\0\16\10\1\131\11\10\26\0" +
                    "\1\10\4\0\3\10\1\132\7\10\1\133\14\10\46\0" +
                    "\1\134\10\0\1\135\4\0\1\136\6\0\1\137\25\0" +
                    "\1\140\1\141\1\0\1\142\2\0\1\143\17\0\1\144" +
                    "\1\145\61\0\1\146\4\0\1\45\1\147\60\0\1\46" +
                    "\64\0\1\150\54\0\1\151\5\0\1\152\54\0\1\127" +
                    "\71\0\1\153\6\0\1\127\5\0\3\52\1\0\1\52" +
                    "\1\0\30\52\25\0\3\54\1\0\1\54\1\0\30\54" +
                    "\25\0\2\55\2\0\1\55\1\0\30\55\65\0\1\53" +
                    "\17\0\1\57\2\0\2\57\3\0\53\57\2\0\1\61" +
                    "\60\0\1\154\2\0\4\154\1\0\52\154\4\0\2\64" +
                    "\2\0\1\64\1\0\30\64\34\0\1\155\71\0\1\156" +
                    "\45\0\1\10\4\0\2\10\1\157\10\10\1\160\14\10" +
                    "\26\0\1\10\4\0\1\10\1\123\26\10\26\0\1\10" +
                    "\4\0\2\10\1\161\25\10\26\0\1\10\4\0\16\10" +
                    "\1\162\11\10\26\0\1\10\4\0\1\10\1\161\26\10" +
                    "\26\0\1\10\4\0\7\10\1\163\20\10\26\0\1\10" +
                    "\4\0\1\10\1\164\26\10\26\0\1\10\4\0\1\10" +
                    "\1\165\26\10\26\0\1\10\4\0\1\166\11\10\1\167" +
                    "\4\10\1\170\10\10\26\0\1\10\4\0\7\10\1\171" +
                    "\20\10\26\0\1\10\4\0\13\10\1\160\14\10\26\0" +
                    "\1\10\4\0\1\172\27\10\26\0\1\10\4\0\1\10" +
                    "\1\173\2\10\1\174\4\10\1\175\16\10\26\0\1\10" +
                    "\4\0\5\10\1\176\22\10\26\0\1\10\4\0\20\10" +
                    "\1\177\7\10\26\0\1\10\4\0\1\10\1\200\7\10" +
                    "\1\200\16\10\26\0\1\10\4\0\1\10\1\201\26\10" +
                    "\26\0\1\10\4\0\1\202\1\203\1\204\25\10\26\0" +
                    "\1\10\4\0\16\10\1\205\11\10\26\0\1\10\4\0" +
                    "\2\10\1\206\10\10\1\207\14\10\26\0\1\10\4\0" +
                    "\5\10\1\210\2\10\1\211\17\10\26\0\1\10\4\0" +
                    "\27\10\1\212\64\0\1\46\1\213\67\0\1\46\16\0" +
                    "\1\10\4\0\7\10\1\214\20\10\26\0\1\10\4\0" +
                    "\4\10\1\215\17\10\1\123\3\10\26\0\1\10\4\0" +
                    "\1\10\1\216\26\10\26\0\1\10\4\0\3\10\1\217" +
                    "\6\10\1\220\15\10\26\0\1\10\4\0\16\10\1\161" +
                    "\11\10\26\0\1\10\4\0\13\10\1\221\14\10\64\0" +
                    "\1\46\62\0\1\137\24\0\1\10\4\0\11\10\1\200" +
                    "\16\10\26\0\1\10\4\0\2\10\1\222\25\10\26\0" +
                    "\1\10\4\0\3\10\1\223\7\10\1\224\14\10\64\0" +
                    "\1\225\62\0\1\136\2\0\1\127\60\0\1\46\63\0" +
                    "\1\46\45\0\1\226\63\0\1\227\52\0\1\230\66\0" +
                    "\1\231\73\0\1\46\4\0\1\136\1\46\3\0\1\136" +
                    "\2\0\1\46\1\0\2\46\31\0\1\137\17\0\1\46" +
                    "\60\0\1\232\70\0\1\233\55\0\1\46\3\0\1\136" +
                    "\55\0\1\234\70\0\1\234\72\0\1\46\15\0\1\235" +
                    "\71\0\1\236\44\0\1\10\4\0\1\10\1\200\1\10" +
                    "\1\70\24\10\26\0\1\10\4\0\17\10\1\123\10\10" +
                    "\26\0\1\10\4\0\6\10\1\200\21\10\26\0\1\10" +
                    "\4\0\10\10\1\237\17\10\26\0\1\10\4\0\10\10" +
                    "\1\123\17\10\26\0\1\10\4\0\13\10\1\240\14\10" +
                    "\26\0\1\10\4\0\13\10\1\241\2\10\1\242\11\10" +
                    "\26\0\1\10\4\0\4\10\1\222\23\10\26\0\1\10" +
                    "\4\0\1\10\1\243\26\10\26\0\1\10\4\0\7\10" +
                    "\1\244\20\10\26\0\1\10\4\0\12\10\1\245\15\10" +
                    "\26\0\1\10\4\0\7\10\1\246\20\10\26\0\1\10" +
                    "\4\0\16\10\1\247\11\10\26\0\1\10\4\0\5\10" +
                    "\1\123\22\10\26\0\1\10\4\0\16\10\1\250\1\10" +
                    "\1\31\7\10\26\0\1\10\4\0\7\10\1\251\20\10" +
                    "\26\0\1\10\4\0\17\10\1\252\10\10\26\0\1\10" +
                    "\4\0\7\10\1\123\20\10\26\0\1\10\4\0\2\10" +
                    "\1\253\25\10\26\0\1\10\4\0\1\10\1\254\26\10" +
                    "\26\0\1\10\4\0\2\10\1\255\25\10\26\0\1\10" +
                    "\4\0\12\10\1\256\15\10\26\0\1\10\4\0\1\10" +
                    "\1\257\26\10\26\0\1\10\4\0\1\260\27\10\26\0" +
                    "\1\10\4\0\4\10\1\261\23\10\26\0\1\10\4\0" +
                    "\17\10\1\262\10\10\26\0\1\10\4\0\1\10\1\263" +
                    "\26\10\26\0\1\10\4\0\7\10\1\264\20\10\46\0" +
                    "\1\137\42\0\1\10\4\0\2\10\1\223\25\10\26\0" +
                    "\1\10\4\0\10\10\1\265\17\10\26\0\1\10\4\0" +
                    "\7\10\1\266\20\10\26\0\1\10\4\0\1\10\1\267" +
                    "\26\10\26\0\1\10\4\0\22\10\1\252\5\10\26\0" +
                    "\1\10\4\0\4\10\1\160\23\10\26\0\1\10\4\0" +
                    "\5\10\1\200\22\10\26\0\1\10\4\0\22\10\1\123" +
                    "\5\10\26\0\1\10\4\0\1\10\1\270\26\10\65\0" +
                    "\1\271\51\0\1\272\72\0\1\136\57\0\1\273\54\0" +
                    "\1\274\75\0\1\46\4\0\1\46\62\0\1\46\25\0" +
                    "\1\275\63\0\1\276\51\0\1\10\4\0\17\10\1\277" +
                    "\10\10\26\0\1\10\4\0\10\10\1\300\17\10\26\0" +
                    "\1\10\4\0\3\10\1\123\24\10\26\0\1\10\4\0" +
                    "\23\10\1\301\4\10\26\0\1\10\4\0\2\10\1\302" +
                    "\25\10\26\0\1\10\4\0\2\10\1\70\25\10\26\0" +
                    "\1\10\4\0\2\10\1\303\25\10\26\0\1\10\4\0" +
                    "\16\10\1\250\11\10\26\0\1\10\4\0\1\10\1\304" +
                    "\26\10\26\0\1\10\4\0\26\10\1\123\1\10\26\0" +
                    "\1\10\4\0\1\305\27\10\26\0\1\10\4\0\2\10" +
                    "\1\306\25\10\26\0\1\10\4\0\14\10\1\245\13\10" +
                    "\26\0\1\10\4\0\3\10\1\307\24\10\26\0\1\10" +
                    "\4\0\12\10\1\310\15\10\26\0\1\10\4\0\1\10" +
                    "\1\311\26\10\26\0\1\10\4\0\16\10\1\312\11\10" +
                    "\26\0\1\10\4\0\1\123\27\10\26\0\1\10\4\0" +
                    "\11\10\1\123\16\10\26\0\1\10\4\0\13\10\1\313" +
                    "\14\10\26\0\1\10\4\0\3\10\1\314\24\10\26\0" +
                    "\1\10\4\0\12\10\1\70\15\10\26\0\1\10\4\0" +
                    "\11\10\1\315\16\10\26\0\1\10\4\0\3\10\1\316" +
                    "\24\10\26\0\1\10\4\0\16\10\1\317\11\10\26\0" +
                    "\1\10\4\0\14\10\1\320\13\10\46\0\1\46\74\0" +
                    "\1\273\36\0\1\227\71\0\1\227\53\0\1\236\66\0" +
                    "\1\321\50\0\1\10\4\0\2\10\1\322\25\10\26\0" +
                    "\1\10\4\0\4\10\1\323\23\10\26\0\1\10\4\0" +
                    "\2\10\1\324\25\10\26\0\1\10\4\0\10\10\1\325" +
                    "\17\10\26\0\1\10\4\0\1\200\27\10\26\0\1\10" +
                    "\4\0\15\10\1\123\12\10\26\0\1\10\4\0\17\10" +
                    "\1\326\10\10\26\0\1\10\4\0\21\10\1\200\6\10" +
                    "\26\0\1\10\4\0\13\10\1\304\14\10\26\0\1\10" +
                    "\4\0\25\10\1\123\2\10\26\0\1\10\4\0\16\10" +
                    "\1\242\11\10\26\0\1\10\4\0\12\10\1\327\15\10" +
                    "\26\0\1\10\4\0\10\10\1\330\17\10\26\0\1\10" +
                    "\4\0\13\10\1\331\14\10\26\0\1\10\4\0\2\10" +
                    "\1\332\25\10\26\0\1\10\4\0\26\10\1\326\1\10" +
                    "\26\0\1\10\4\0\1\10\1\333\10\10\1\334\15\10" +
                    "\26\0\1\10\4\0\13\10\1\335\14\10\41\0\1\336" +
                    "\47\0\1\10\4\0\3\10\1\337\24\10\26\0\1\10" +
                    "\4\0\5\10\1\340\22\10\26\0\1\10\4\0\1\10" +
                    "\1\200\26\10\26\0\1\10\4\0\2\10\1\341\25\10" +
                    "\26\0\1\10\4\0\2\10\1\342\25\10\26\0\1\10" +
                    "\4\0\2\10\1\331\25\10\26\0\1\10\4\0\7\10" +
                    "\1\343\20\10\26\0\1\10\4\0\6\10\1\123\21\10" +
                    "\26\0\1\10\4\0\3\10\1\304\24\10\26\0\1\10" +
                    "\4\0\16\10\1\344\11\10\26\0\1\10\4\0\16\10" +
                    "\1\345\11\10\26\0\1\10\4\0\24\10\1\123\3\10" +
                    "\26\0\1\10\4\0\2\10\1\174\25\10\26\0\1\10" +
                    "\4\0\14\10\1\346\13\10\26\0\1\10\4\0\21\10" +
                    "\1\161\6\10\26\0\1\10\4\0\12\10\1\200\15\10" +
                    "\26\0\1\10\4\0\10\10\1\70\17\10\26\0\1\10" +
                    "\4\0\13\10\1\163\14\10\26\0\1\10\4\0\17\10" +
                    "\1\347\10\10\26\0\1\10\4\0\7\10\1\241\20\10" +
                    "\26\0\1\10\4\0\2\10\1\343\25\10\22\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[11169];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\1\2\0\2\1\1\11\1\0\23\1\1\0\1\1" +
                    "\1\0\1\1\2\0\1\1\1\0\1\11\1\0\2\11" +
                    "\1\1\1\11\5\1\1\11\1\0\1\11\1\1\2\0" +
                    "\27\1\2\0\7\1\2\0\3\1\11\0\1\1\2\0" +
                    "\1\1\3\0\1\11\2\0\34\1\1\0\11\1\5\0" +
                    "\3\1\2\0\33\1\5\0\22\1\1\0\14\1\1\11" +
                    "\11\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */

    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public PumlLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN = 1;
    private static final byte BRACKET = 2;
    private static final byte CURLY = 3;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public PumlLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 2472) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return token(TokenType.IDENTIFIER);
                    }
                    case 16:
                        break;
                    case 2: {
                        yybegin(INSIDE_COLONS);
                        return token(TokenType.IDENTIFIER);
                    }
                    case 17:
                        break;
                    case 3: {
                        yybegin(INSIDE_PARENTHESIS);
                        return token(TokenType.IDENTIFIER);
                    }
                    case 18:
                        break;
                    case 4: {
                        yybegin(STEREOTYPE);
                        return token(TokenType.STRING);
                    }
                    case 19:
                        break;
                    case 5: {
                    }
                    case 20:
                        break;
                    case 6: {
                        yybegin(STRING);
                        tokenStart = yychar;
                        tokenLength = 1;
                    }
                    case 21:
                        break;
                    case 7: {
                        return token(TokenType.OPERATOR);
                    }
                    case 22:
                        break;
                    case 8: {
                        yybegin(CHARLITERAL);
                        tokenStart = yychar;
                        tokenLength = 1;
                    }
                    case 23:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return token(TokenType.ERROR);
                    }
                    case 24:
                        break;
                    case 10: {
                        yybegin(YYINITIAL);
                        return token(TokenType.OPERATOR);
                    }
                    case 25:
                        break;
                    case 11: {
                        tokenLength += yylength();
                    }
                    case 26:
                        break;
                    case 12: {
                        yybegin(YYINITIAL);
                    }
                    case 27:
                        break;
                    case 13: {
                        yybegin(YYINITIAL);
                        // length also includes the trailing quote
                        return token(TokenType.STRING, tokenStart, tokenLength + 1);
                    }
                    case 28:
                        break;
                    case 14: {
                        return token(TokenType.KEYWORD);
                    }
                    case 29:
                        break;
                    case 15: {
                        tokenLength += 2;
                    }
                    case 30:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
